#if defined fixer_included
	#endinput
#endif
#define fixer_included

/*
 * fixer.inc
 * Version: 2.1.3 (last updated on 11 August, 2016)
 *
 * Please visit the following thread to know about the features/fixes and the credits.
 * Also, support available there and you can also share your suggestions or fixes.
 * URL: http://forum.sa-mp.com/showthread.php?t=591458
 *
 * Funtions:
 * native FIXER_AllowUpdate(bool:allow = true);
 * native FIXER_UpdatePlayerSpectateID(playerid, bool:advance = true);
 *
 */

#if ! defined KEY_AIM
	#define KEY_AIM (128)
#endif

#if ! defined SPECIAL_ACTION_PISSING
	#define SPECIAL_ACTION_PISSING (68)
#endif

#if ! defined getgravity
	native Float:getgravity();
#endif

#if ! defined gpci
	native gpci(playerid, serial[], maxlen);
#endif

#if ! defined IsValidVehicle
	native IsValidVehicle(vehicleid);
#endif

enum
{
    SPECTATE_TYPE_DISABLED = 0,
    SPECTATE_TYPE_ENABLED,
    SPECTATE_TYPE_PLAYER,
    SPECTATE_TYPE_VEHICLE
};

static bool:FIX_UPDATER;

static const ANIMATIONS[][] =
{
    "AIRPORT",      "Attractors",   "BAR",          "BASEBALL",     "BD_FIRE",
    "BEACH",        "benchpress",   "BF_injection", "BIKED",        "BIKEH",
    "BIKELEAP",     "BIKES",        "BIKEV",        "BIKE_DBZ",     "BLOWJOBZ",
    "BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
    "BUS",          "CAMERA",       "CAR",          "CARRY",        "CAR_CHAT",
    "CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
    "COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
    "DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
    "DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
    "FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
    "Flowers",      "FOOD",         "Freeweights",  "GANGS",        "GHANDS",
    "GHETTO_DB",    "goggles",      "GRAFFITI",     "GRAVEYARD",    "GRENADE",
    "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",    "INT_OFFICE",
    "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",      "KNIFE",
    "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",     "MD_CHASE",
    "MD_END",       "MEDIC",        "MISC",         "MTB",          "MUSCULAR",
    "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",    "PARK",
    "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",    "POLICE",
    "POOL",         "POOR",         "PYTHON",       "QUAD",         "QUAD_DBZ",
    "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",     "ROCKET",
    "RUSTLER",      "RYDER",        "SCRATCHING",   "SHAMAL",       "SHOP",
    "SHOTGUN",      "SILENCED",     "SKATE",        "SMOKING",      "SNIPER",
    "SPRAYCAN",     "STRIP",        "SUNBATHE",     "SWAT",         "SWEET",
    "SWIM",         "SWORD",        "TANK",         "TATTOOS",      "TEC",
    "TRAIN",        "TRUCK",        "UZI",          "VAN",          "VENDING",
    "VORTEX",       "WAYFARER",     "WEAPONS",      "WUZI"
};
static p_AnimPrelaodTimer[MAX_PLAYERS][sizeof (ANIMATIONS)];

enum E_PLAYER_ATTACHMENT
{
	bool:	E_PLAYER_ATTACHMENT_USED,
 			E_PLAYER_ATTACHMENT_MODEL,
    		E_PLAYER_ATTACHMENT_BONE,
    Float:	E_PLAYER_ATTACHMENT_X,
   	Float:	E_PLAYER_ATTACHMENT_Y,
   	Float:	E_PLAYER_ATTACHMENT_Z,
   	Float:  E_PLAYER_ATTACHMENT_RX,
   	Float:  E_PLAYER_ATTACHMENT_RY,
   	Float:  E_PLAYER_ATTACHMENT_RZ,
   	Float:  E_PLAYER_ATTACHMENT_SX,
   	Float:  E_PLAYER_ATTACHMENT_SY,
   	Float:  E_PLAYER_ATTACHMENT_SZ,
			E_PLAYER_ATTACHMENT_COLOR1,
			E_PLAYER_ATTACHMENT_COLOR2
};
static p_Attachment[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS][E_PLAYER_ATTACHMENT];

static p_CheckpointTimer[MAX_PLAYERS][2];

static p_Ip[MAX_PLAYERS][18];

static p_Skin[MAX_PLAYERS];

static p_CurrentWeapon[MAX_PLAYERS];

enum E_WORLD_BOUND
{
    bool:   E_WORLD_BOUND_CHECK,
    Float:	E_WORLD_BOUND_PX,
    Float:	E_WORLD_BOUND_PY,
    Float:	E_WORLD_BOUND_PZ,
    Float:	E_WORLD_BOUND_LX,
    Float:	E_WORLD_BOUND_LY,
    Float:	E_WORLD_BOUND_UX,
    Float:	E_WORLD_BOUND_UY
};
static p_WorldBounds[MAX_PLAYERS][E_WORLD_BOUND];

static p_ToggleSpecTick[MAX_PLAYERS];
static p_ToggleSpecTimer[MAX_PLAYERS];

static p_LastClickedMapTick[MAX_PLAYERS];

enum e_SPECTATE_DATA
{
	E_SPEC_DATA_ID,
	E_SPEC_DATA_TYPE,
	E_SPEC_DATA_MODE
};
static p_SpecData[MAX_PLAYERS][e_SPECTATE_DATA];

static v_LastWheelShotTeam[MAX_VEHICLES][4];
static v_LastWheelsDamageStatus[MAX_VEHICLES];

static const Float:PAY_N_SPRAYS[][3] =
{
	{1025.05, -1024.23, 32.1},
 	{487.68, -1740.87, 11.13},
  	{-1420.73, 2583.37, 55.56},
    {-1904.39, 284.97, 40.75},
    {-2425.91, 1022.33, 50.10},
    {1975.60, 2162.16, 10.77},
    {2065.38, -1831.51, 13.25},
    {-99.55, 1118.36, 19.44},
    {721.07, -455.94, 16.04},
    {2393.74, 1493.01, 10.52}
};
static Float:v_VehicleHealth[MAX_VEHICLES];

static v_Interior[MAX_VEHICLES];

static const VEHICLE_MODS[] =
{
	0b00000011001111000010011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000110100010011111111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001110110010011110000101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010101111000100011100000011, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011101110100010011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100011100000011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001100010000011101000100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001010000000011100111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010101111010100011100000001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001110100010011110000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001010000000011101111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010011110100010011111001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100000100010011110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001111100000011111000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011011100000011011100110000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011000111010010011101110101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010101111100100011110001000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000010000011101110001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100110100000111111001110, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000001100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011001110000010011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001111111000011110010101, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100111110000011110001100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010100101100010011111101010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001101101100011110000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100111100001111111001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b11111100000000000000010000110111, 0b00000000000000000000000000000000, 0b00000010000111000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000011111111100110000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000001101110000111, 0b00000000000000000000000000000001, 0b00000001111000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011100111100000011111010010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010001111001100011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000110000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011100011100000011111010110, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010001111010000011100001001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000001100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100111100001111110001010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010100111000000011101111010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010101111010000011101101100, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b11111111111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000111111000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111111111110, 0b00000000000000000000000000000111, 0b11000000000000000000000000000000, 0b00000000000000000010000000000111,
	0b11111110000000000000011100000000, 0b00000000000000000000000000000011, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000011110000000000, 0b00000000000000000000011000000000,
	0b11001110000000000000011100000000, 0b11111111100000000000000000000000, 0b00000000111111111111111000000001, 0b00000000000000000000000000000111, 0b00111100000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000001111111100, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000001111000000000000000000, 0b00000000000000000001100000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000011111111110000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000011110000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000001000111, 0b00000000000000000000000000111110, 0b00111100000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000001110000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000001111, 0b00000000000000000000000000000000, 0b00000000000000111100000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000001111000000, 0b11000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010100101100000011111000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011000101110010011111110001, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000110000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010010101100010011111110000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000011100111100000011111000010, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000111100000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
	0b00000010000000000000011100000000, 0b00000000000000000000000000000000, 0b00000000111111111111111000000000, 0b00000000000000000000000000000111, 0b00000000000000000000000000000000, 0b00000000000000000000000000000000
};

enum E_TOGGLE
{
	E_TOGGLE_TIRE_POPPING,
	E_TOGGLE_INTERIOR_WEAPONS,
	E_TOGGLE_ADMIN_TELEPORT,
	E_TOGGLE_VEHICLE_FRIENDLYFIRE
};
static bool:g_Toggle[E_TOGGLE];

public OnPlayerConnect(playerid)
{
	for (new i, j = sizeof (ANIMATIONS); i < j; i++)
    	p_AnimPrelaodTimer[playerid][i] = -1;

    for (new i; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
    {
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_USED] = false;
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_MODEL] = 0;
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_BONE] = 0;
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_X] = 0.0;
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_Y] = 0.0;
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_Z] = 0.0;
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_RX] = 0.0;
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_RY] = 0.0;
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_RZ] = 0.0;
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_SX] = 1.0;
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_SY] = 1.0;
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_SZ] = 1.0;
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_COLOR1] = 0;
   	 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_COLOR2] = 0;
	}

	GetPlayerIp(playerid, p_Ip[playerid], 18);

    p_Skin[playerid] = 0;

    p_CurrentWeapon[playerid] = 0;

	p_WorldBounds[playerid][E_WORLD_BOUND_CHECK] = false;
	p_WorldBounds[playerid][E_WORLD_BOUND_PX] = 0.0;
	p_WorldBounds[playerid][E_WORLD_BOUND_PY] = 0.0;
	p_WorldBounds[playerid][E_WORLD_BOUND_PZ] = 0.0;
	p_WorldBounds[playerid][E_WORLD_BOUND_LX] = 0.0;
	p_WorldBounds[playerid][E_WORLD_BOUND_LY] = 0.0;
	p_WorldBounds[playerid][E_WORLD_BOUND_UX] = 0.0;
	p_WorldBounds[playerid][E_WORLD_BOUND_UY] = 0.0;

	p_ToggleSpecTick[playerid] = -1;
	p_ToggleSpecTimer[playerid] = -1;

	p_LastClickedMapTick[playerid] = 0;

    DisablePlayerCheckpoint(playerid);
    DisablePlayerRaceCheckpoint(playerid);
	SetPlayerColor(playerid, 0xFFFFFFFF);

    #if defined FIX_OnPlayerConnect
		return FIX_OnPlayerConnect(playerid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerConnect
	#undef OnPlayerConnect
#else
	#define _ALS_OnPlayerConnect
#endif
#define OnPlayerConnect FIX_OnPlayerConnect
#if defined FIX_OnPlayerConnect
	forward FIX_OnPlayerConnect(playerid);
#endif

public OnPlayerDisconnect(playerid, reason)
{
	KillTimer(p_ToggleSpecTimer[playerid]);

    new Float:cam[3];
	GetPlayerCameraPos(playerid, cam[0], cam[1], cam[2]);

	new Float:fpos[3];
	GetPlayerPos(playerid, fpos[0], fpos[1], fpos[2]);

	if (! GetPlayerInterior(playerid))
	{
		cam[2] += 5.0;
 	}
 	else
 	{
 	    cam[2] += 0.5;
 	}

 	for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i) && i != playerid && p_SpecData[i][E_SPEC_DATA_TYPE] == SPECTATE_TYPE_PLAYER && p_SpecData[i][E_SPEC_DATA_ID] == playerid)
		{
 			if (FIXER_UpdatePlayerSpectateID(i) == INVALID_PLAYER_ID)
 			{
			 	SetPlayerCameraPos(i, cam[0], cam[1], cam[2]);
				SetPlayerCameraLookAt(i, fpos[0], fpos[1], fpos[2]);
 			}
  		}
	}

    #if defined FIX_OnPlayerDisconnect
       	return FIX_OnPlayerDisconnect(playerid, reason);
	#else
	   	return 1;
	#endif
}
#if defined _ALS_OnPlayerDisconnect
    #undef OnPlayerDisconnect
#else
    #define _ALS_OnPlayerDisconnect
#endif
#define OnPlayerDisconnect FIX_OnPlayerDisconnect
#if defined FIX_OnPlayerDisconnect
    forward FIX_OnPlayerDisconnect(playerid, reason);
#endif

public OnPlayerSpawn(playerid)
{
	for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i) && i != playerid && p_SpecData[i][E_SPEC_DATA_TYPE] == SPECTATE_TYPE_PLAYER && p_SpecData[i][E_SPEC_DATA_ID] == playerid)
			PlayerSpectatePlayer(i, playerid, p_SpecData[i][E_SPEC_DATA_MODE]);
 	}

 	#if defined FIX_OnPlayerSpawn
 		return FIX_OnPlayerSpawn(playerid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerSpawn
	#undef OnPlayerSpawn
#else
    #define _ALS_OnPlayerSpawn
#endif
#define OnPlayerSpawn FIX_OnPlayerSpawn
#if defined FIX_OnPlayerSpawn
    forward FIX_OnPlayerSpawn(playerid);
#endif

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i) && i != playerid && p_SpecData[i][E_SPEC_DATA_TYPE] == SPECTATE_TYPE_PLAYER && p_SpecData[i][E_SPEC_DATA_ID] == playerid)
 			SetPlayerInterior(i, newinteriorid);
  	}

	#if defined FIX_OnPlayerInteriorChange
	  	return FIX_OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid);
	#else
	   	return 1;
	#endif
}
#if defined _ALS_OnPlayerInteriorChange
    #undef OnPlayerInteriorChange
#else
    #define _ALS_OnPlayerInteriorChange
#endif
#define OnPlayerInteriorChange FIX_OnPlayerInteriorChange
#if defined FIX_OnPlayerInteriorChange
    forward FIX_OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid);
#endif

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if ((newkeys & (KEY_AIM)) == (KEY_AIM))
	{
	    switch (GetPlayerWeapon(playerid))
		{
			case WEAPON_SNIPER, WEAPON_ROCKETLAUNCHER, WEAPON_HEATSEEKER, WEAPON_CAMERA:
			{
			    for (new i; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if (IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
				    	RemovePlayerAttachedObject(playerid, i);
					}
		        }
		    }
		}
	}
	else if (((newkeys & (KEY_AIM)) != (KEY_AIM)) && ((oldkeys & (KEY_AIM)) == (KEY_AIM)))
	{
	    for (new i; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
		{
			if (! IsPlayerAttachedObjectSlotUsed(playerid, i) && p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_USED])
		    {
				SetPlayerAttachedObject(playerid, i,
											p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_MODEL],
											p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_BONE],
											p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_X], p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_Y], p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_Z],
										 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_RX], p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_RY], p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_RZ],
										 	p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_SX], p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_SY], p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_SZ],
											p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_COLOR1], p_Attachment[playerid][i][E_PLAYER_ATTACHMENT_COLOR2]);
			}
		}
	}

	#if defined FIX_OnPlayerKeyStateChange
       	return FIX_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#else
	   	return 1;
	#endif
}
#if defined _ALS_OnPlayerKeyStateChange
    #undef OnPlayerKeyStateChange
#else
    #define _ALS_OnPlayerKeyStateChange
#endif
#define OnPlayerKeyStateChange FIX_OnPlayerKeyStateChange
#if defined FIX_OnPlayerKeyStateChange
    forward FIX_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
#endif

public OnPlayerUpdate(playerid)
{
	if (!FIX_UPDATER)
	{
	    #if defined FIX_OnPlayerUpdate
			return FIX_OnPlayerUpdate(playerid);
		#else
			return 1;
		#endif
	}

	if (!g_Toggle[E_TOGGLE_INTERIOR_WEAPONS] && GetPlayerInterior(playerid) > 0 && GetPlayerWeapon(playerid) > 0)
	{
	    p_CurrentWeapon[playerid] = 0;
		SetPlayerArmedWeapon(playerid, 0);
	}

	if (p_LastClickedMapTick[playerid] > 0)
	{
		if ((FIX_GetTickCount() - p_LastClickedMapTick[playerid]) >= 1000)
		{
	    	p_LastClickedMapTick[playerid] = 0;

	    	new Float:x, Float:y, Float:z;
	    	GetPlayerPos(playerid, x, y, z);
	    	SetPlayerPosFindZ(playerid, x, y, z);
		}
	}

	if (p_WorldBounds[playerid][E_WORLD_BOUND_CHECK])
	{
		new ud, lr, keys;
		GetPlayerKeys(playerid, keys, ud, lr);
		if (keys & KEY_AIM)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);

			if (p_WorldBounds[playerid][E_WORLD_BOUND_LX] < x < p_WorldBounds[playerid][E_WORLD_BOUND_UX] && p_WorldBounds[playerid][E_WORLD_BOUND_LY] < y < p_WorldBounds[playerid][E_WORLD_BOUND_UY])
			{
				p_WorldBounds[playerid][E_WORLD_BOUND_PX] = x;
				p_WorldBounds[playerid][E_WORLD_BOUND_PY] = y;
				p_WorldBounds[playerid][E_WORLD_BOUND_PZ] = z;
			}
			else
			{
				SetPlayerPos(playerid, p_WorldBounds[playerid][E_WORLD_BOUND_PX], p_WorldBounds[playerid][E_WORLD_BOUND_PY], p_WorldBounds[playerid][E_WORLD_BOUND_PZ]);
				GameTextForPlayer(playerid, "~w~~h~Saty within the ~r~world boundries", 5000, 3);
			}
		}
	}

	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if (v_VehicleHealth[vehicleid] > 100.0)
		{
			new Float:health;
			GetVehicleHealth(vehicleid, health);

			if (v_VehicleHealth[vehicleid] < health)
			{
				for (new i, j = sizeof (PAY_N_SPRAYS); i < j; i++)
		    	{
		       		if (IsPlayerInRangeOfPoint(playerid, 10.0, PAY_N_SPRAYS[i][0], PAY_N_SPRAYS[i][1], PAY_N_SPRAYS[i][2]))
		            {
		               	CallRemoteFunction("OnVehicleRespray", "iiii", playerid, vehicleid, -1, -1);
		                break;
		            }
		        }

				v_VehicleHealth[vehicleid] = health;
			}
		}
	}

	switch (p_SpecData[playerid][E_SPEC_DATA_TYPE])
	{
	    case SPECTATE_TYPE_PLAYER:
	    {
	        new target_worldid = GetPlayerVirtualWorld(p_SpecData[playerid][E_SPEC_DATA_ID]);
	        if (GetPlayerVirtualWorld(playerid) != target_worldid)
	        	SetPlayerVirtualWorld(playerid, target_worldid);
	    }

	    case SPECTATE_TYPE_VEHICLE:
	    {
	        new target_interiorid = v_Interior[p_SpecData[playerid][E_SPEC_DATA_ID]];
	        if (GetPlayerInterior(playerid) != target_interiorid)
	        	SetPlayerInterior(playerid, target_interiorid);
	    }
	}

	#if defined FIX_OnPlayerUpdate
		return FIX_OnPlayerUpdate(playerid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerUpdate
	#undef OnPlayerUpdate
#else
	#define _ALS_OnPlayerUpdate
#endif
#define OnPlayerUpdate FIX_OnPlayerUpdate
#if defined FIX_OnPlayerUpdate
	forward FIX_OnPlayerUpdate(playerid);
#endif

public OnPlayerDeath(playerid, killerid, reason)
{
	if (!FIX_UPDATER)
	{
	    #if defined FIX_OnPlayerDeath
			return FIX_OnPlayerDeath(playerid, killerid, reason);
		#else
			return 1;
		#endif
	}

    p_LastClickedMapTick[playerid] = 0;

    new Float:cam[3];
	GetPlayerCameraPos(playerid, cam[0], cam[1], cam[2]);

	new Float:fpos[3];
	GetPlayerPos(playerid, fpos[0], fpos[1], fpos[2]);

	if (! GetPlayerInterior(playerid))
	{
		cam[2] += 5.0;
 	}
 	else
 	{
 	    cam[2] += 0.5;
 	}

	for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i) && i != playerid && p_SpecData[i][E_SPEC_DATA_TYPE] == SPECTATE_TYPE_PLAYER && p_SpecData[i][E_SPEC_DATA_ID] == playerid)
		{
			SetPlayerCameraPos(i, cam[0], cam[1], cam[2]);
			SetPlayerCameraLookAt(i, fpos[0], fpos[1], fpos[2]);
		}
 	}

	#if defined FIX_OnPlayerDeath
		return FIX_OnPlayerDeath(playerid, killerid, reason);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerDeath
	#undef OnPlayerDeath
#else
	#define _ALS_OnPlayerDeath
#endif
#define OnPlayerDeath FIX_OnPlayerDeath
#if defined FIX_OnPlayerDeath
	forward FIX_OnPlayerDeath(playerid, killerid, reason);
#endif

public OnVehicleMod(playerid, vehicleid, componentid)
{
    new modelid = GetVehicleModel(vehicleid);
	if (400 <= modelid <= 611)
	{
		switch (componentid)
		{
			case 1000..1191:
			{
				if (VEHICLE_MODS[(modelid - 400) * 6 + (componentid - 1000 >>> 5)] & 1 << (componentid - 1000 & 0b00011111))
				{
					GetVehicleHealth(vehicleid, v_VehicleHealth[vehicleid]);

					#if defined FIX_OnVehicleMod
						return FIX_OnVehicleMod(playerid, vehicleid, componentid);
					#else
						return 1;
					#endif
				}
			}
			case 1192, 1193:
			{
				if (modelid == 576)
				{
					GetVehicleHealth(vehicleid, v_VehicleHealth[vehicleid]);

					#if defined FIX_OnVehicleMod
						return FIX_OnVehicleMod(playerid, vehicleid, componentid);
					#else
						return 1;
					#endif
				}
			}
		}
	}

	DestroyVehicle(vehicleid);
	Kick(playerid);
 	return 0;
}
#if defined _ALS_OnVehicleMod
	#undef OnVehicleMod
#else
	#define _ALS_OnVehicleMod
#endif
#define OnVehicleMod FIX_OnVehicleMod
#if defined FIX_OnVehicleMod
	forward FIX_OnVehicleMod(playerid, vehicleid, componentid);
#endif

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	GetVehicleHealth(vehicleid, v_VehicleHealth[vehicleid]);

	#if defined FIX_OnVehicleRespray
		return FIX_OnVehicleRespray(playerid, vehicleid, color1, color2);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnVehicleRespray
	#undef OnVehicleRespray
#else
	#define _ALS_OnVehicleRespray
#endif
#define OnVehicleRespray FIX_OnVehicleRespray
#if defined FIX_OnVehicleRespray
	forward FIX_OnVehicleRespray(playerid, vehicleid, color1, color2);
#endif

public OnVehicleSpawn(vehicleid)
{
	GetVehicleHealth(vehicleid, v_VehicleHealth[vehicleid]);

	if (!FIX_UPDATER)
	{
	    #if defined FIX_OnVehicleSpawn
			return FIX_OnVehicleSpawn(vehicleid);
		#else
			return 1;
		#endif
	}

    for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i) && p_SpecData[i][E_SPEC_DATA_TYPE] == SPECTATE_TYPE_VEHICLE && p_SpecData[i][E_SPEC_DATA_ID] == vehicleid)
			PlayerSpectateVehicle(i, vehicleid, p_SpecData[i][E_SPEC_DATA_MODE]);
 	}

	#if defined FIX_OnVehicleSpawn
		return FIX_OnVehicleSpawn(vehicleid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnVehicleSpawn
	#undef OnVehicleSpawn
#else
	#define _ALS_OnVehicleSpawn
#endif
#define OnVehicleSpawn FIX_OnVehicleSpawn
#if defined FIX_OnVehicleSpawn
	forward FIX_OnVehicleSpawn(vehicleid);
#endif

public OnVehicleDeath(vehicleid, killerid)
{
	GetVehicleHealth(vehicleid, v_VehicleHealth[vehicleid]);

	if (!FIX_UPDATER)
	{
		#if defined FIX_OnVehicleDeath
			return FIX_OnVehicleDeath(vehicleid, killerid);
		#else
			return 1;
		#endif
	}

	new Float:pos[3];
	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
 	pos[2] += 5.0;

	for (new i, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if (IsPlayerConnected(i) && p_SpecData[i][E_SPEC_DATA_TYPE] == SPECTATE_TYPE_VEHICLE && p_SpecData[i][E_SPEC_DATA_ID] == vehicleid)
		{
			SetPlayerCameraPos(i, pos[0], pos[1], pos[2]);
			SetPlayerCameraLookAt(i, pos[0], pos[1], pos[2]);
		}
 	}

	#if defined FIX_OnVehicleDeath
		return FIX_OnVehicleDeath(vehicleid, killerid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnVehicleDeath
	#undef OnVehicleDeath
#else
	#define _ALS_OnVehicleDeath
#endif
#define OnVehicleDeath FIX_OnVehicleDeath
#if defined FIX_OnVehicleDeath
	forward FIX_OnVehicleDeath(vehicleid, killerid);
#endif

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if (!FIX_UPDATER)
	{
		#if defined FIX_OnVehicleDamageStatusUpd
			return FIX_OnVehicleDamageStatusUpd(vehicleid, playerid);
		#else
			return 1;
		#endif
	}

	if (! g_Toggle[E_TOGGLE_TIRE_POPPING])
	{
	    new _panels, _doors, _lights, _tires;
	    GetVehicleDamageStatus(vehicleid, _panels, _doors, _lights, _tires);

	    _tires = 0;

	    UpdateVehicleDamageStatus(vehicleid, _panels, _doors, _lights, _tires);
	}
	else
	{
	    for (new i; i < 4; i++)
	    {
			if (GetPlayerTeam(playerid) != NO_TEAM && v_LastWheelShotTeam[vehicleid][i] != NO_TEAM && GetPlayerTeam(playerid) == v_LastWheelShotTeam[vehicleid][i])
			{
	    		new _panels, _doors, _lights, _tires;
	    		GetVehicleDamageStatus(vehicleid, _panels, _doors, _lights, _tires);

				_tires = v_LastWheelsDamageStatus[vehicleid];

			    UpdateVehicleDamageStatus(vehicleid, _panels, _doors, _lights, _tires);
		    }
	    }
	}

	#if defined FIX_OnVehicleDamageStatusUpd
		return FIX_OnVehicleDamageStatusUpd(vehicleid, playerid);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnVehicleDamageStatusUpd
	#undef OnVehicleDamageStatusUpdate
#else
	#define _ALS_OnVehicleDamageStatusUpd
#endif
#define OnVehicleDamageStatusUpdate FIX_OnVehicleDamageStatusUpd
#if defined FIX_OnVehicleDamageStatusUpd
	forward FIX_OnVehicleDamageStatusUpd(vehicleid, playerid);
#endif

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if (weaponid < 22 || weaponid > 38)
 		return Kick(playerid);

	new Float:z;
    GetPlayerPos(playerid, z, z, z);
	if (! (-20000.0 <= z <= 20000.0))
 		return Kick(playerid);

	if (!FIX_UPDATER)
	{
	    #if defined FIX_OnPlayerWeaponShot
			return FIX_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ);
		#else
			return 1;
		#endif
	}

	if (hittype == BULLET_HIT_TYPE_VEHICLE)
	{
		new Float:fSet[6];
	 	new modelid = GetVehicleModel(hitid);
	  	GetVehicleModelInfo(modelid, VEHICLE_MODEL_INFO_WHEELSFRONT, fSet[0], fSet[1], fSet[2]);
	   	GetVehicleModelInfo(modelid, VEHICLE_MODEL_INFO_WHEELSREAR, fSet[3], fSet[4], fSet[5]);

		if (fX >= fSet[0] - 2.4 && fX <= fSet[0] && fY >= fSet[1] - 0.4 && fY <= fSet[1] + 0.4 && fZ >= fSet[2] - 0.4 && fZ <= fSet[2] + 0.4)
	 	{
			v_LastWheelShotTeam[hitid][0] = GetPlayerTeam(playerid);
			GetVehicleDamageStatus(hitid, v_LastWheelsDamageStatus[hitid], v_LastWheelsDamageStatus[hitid], v_LastWheelsDamageStatus[hitid], v_LastWheelsDamageStatus[hitid]);
	    }
	    else if (fX >= fSet[0] - 0.4 && fX <= fSet[0] + 0.4 && fY >= fSet[1] - 0.4 && fY <= fSet[1] + 0.4 && fZ >= fSet[2] - 0.4 && fZ <= fSet[2] + 0.4)
	    {
			v_LastWheelShotTeam[hitid][0] = GetPlayerTeam(playerid);
			GetVehicleDamageStatus(hitid, v_LastWheelsDamageStatus[hitid], v_LastWheelsDamageStatus[hitid], v_LastWheelsDamageStatus[hitid], v_LastWheelsDamageStatus[hitid]);
	    }
	    else if (fX >= fSet[3] - 2.4 && fX <= fSet[3] && fY >= fSet[4] - 0.4 && fY <= fSet[4] + 0.4 && fZ >= fSet[5] - 0.4 && fZ <= fSet[5] + 0.4)
	    {
			v_LastWheelShotTeam[hitid][0] = GetPlayerTeam(playerid);
			GetVehicleDamageStatus(hitid, v_LastWheelsDamageStatus[hitid], v_LastWheelsDamageStatus[hitid], v_LastWheelsDamageStatus[hitid], v_LastWheelsDamageStatus[hitid]);
	    }
	    else if (fX >= fSet[3] - 0.4 && fX <= fSet[3] + 0.4 && fY >= fSet[4] - 0.4 && fY <= fSet[4] + 0.4 && fZ >= fSet[5] - 0.4 && fZ <= fSet[5] + 0.4)
	    {
			v_LastWheelShotTeam[hitid][0] = GetPlayerTeam(playerid);
			GetVehicleDamageStatus(hitid, v_LastWheelsDamageStatus[hitid], v_LastWheelsDamageStatus[hitid], v_LastWheelsDamageStatus[hitid], v_LastWheelsDamageStatus[hitid]);
	    }
    }

    #if defined FIX_OnPlayerWeaponShot
		return FIX_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerWeaponShot
   #undef OnPlayerWeaponShot
#else
    #define _ALS_OnPlayerWeaponShot
#endif
#define OnPlayerWeaponShot FIX_OnPlayerWeaponShot
#if defined FIX_OnPlayerWeaponShot
	forward FIX_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ);
#endif

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if (!FIX_UPDATER)
	{
	    #if defined S_OnPlayerClickMap
			return S_OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ);
		#else
			return 1;
		#endif
	}

	if (g_Toggle[E_TOGGLE_ADMIN_TELEPORT])
	{
	    if (IsPlayerAdmin(playerid))
	    {
    		SetPlayerPosFindZ(playerid, fX, fY, 500.0);
			p_LastClickedMapTick[playerid] = 0;
		}
	}

    #if defined S_OnPlayerClickMap
		return S_OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerClickMap
   #undef OnPlayerClickMap
#else
    #define _ALS_OnPlayerClickMap
#endif
#define OnPlayerClickMap S_OnPlayerClickMap
#if defined S_OnPlayerClickMap
	forward S_OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ);
#endif

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if (newstate == PLAYER_STATE_DRIVER)
	{
	    new model = GetVehicleModel(GetPlayerVehicleID(playerid));
		if (GetPlayerWeapon(playerid) == 34 && (model == 520 || model == 425))
		{
	    	p_CurrentWeapon[playerid] = 0;
	    	SetPlayerArmedWeapon(playerid, 0);
			return 0;
		}
		else
			p_CurrentWeapon[playerid] = GetPlayerWeapon(playerid);
	}

	if (!FIX_UPDATER)
	{
		#if defined FIX_OnPlayerStateChange
			return FIX_OnPlayerStateChange(playerid, newstate, oldstate);
		#else
			return 1;
		#endif
	}

	if (newstate == PLAYER_STATE_SPECTATING)
	{
	    new Float:cam[3];
		GetPlayerCameraPos(playerid, cam[0], cam[1], cam[2]);

		new Float:fpos[3];
		GetPlayerPos(playerid, fpos[0], fpos[1], fpos[2]);

		if (! GetPlayerInterior(playerid))
		{
			cam[2] += 5.0;
	 	}
	 	else
	 	{
	 	    cam[2] += 0.5;
	 	}

		for (new i, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if (IsPlayerConnected(i) && i != playerid && p_SpecData[i][E_SPEC_DATA_TYPE] == SPECTATE_TYPE_PLAYER && p_SpecData[i][E_SPEC_DATA_ID] == playerid)
			{
	 			if (FIXER_UpdatePlayerSpectateID(i) == INVALID_PLAYER_ID)
	 			{
				 	SetPlayerCameraPos(i, cam[0], cam[1], cam[2]);
					SetPlayerCameraLookAt(i, fpos[0], fpos[1], fpos[2]);
	 			}
	  		}
		}
  	}
	else if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_ONFOOT || newstate == PLAYER_STATE_SPAWNED)
	{
		for (new i, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if (IsPlayerConnected(i) && i != playerid && p_SpecData[i][E_SPEC_DATA_TYPE] == SPECTATE_TYPE_PLAYER && p_SpecData[i][E_SPEC_DATA_ID] == playerid)
	 			FIX_PlayerSpectatePlayer(i, playerid, p_SpecData[i][E_SPEC_DATA_MODE]);
	  	}
  	}

	#if defined FIX_OnPlayerStateChange
		return FIX_OnPlayerStateChange(playerid, newstate, oldstate);
	#else
		return 1;
	#endif
}
#if defined _ALS_OnPlayerStateChange
	#undef OnPlayerStateChange
#else
	#define _ALS_OnPlayerStateChange
#endif
#define OnPlayerStateChange FIX_OnPlayerStateChange
#if defined FIX_OnPlayerStateChange
	forward FIX_OnPlayerStateChange(playerid, newstate, oldstate);
#endif

#if ! defined FILTERSCRIPT
	public OnGameModeInit()
#else
	public OnFilterScriptInit()
#endif
{
	g_Toggle[E_TOGGLE_TIRE_POPPING] = true;
	g_Toggle[E_TOGGLE_INTERIOR_WEAPONS] = true;
	g_Toggle[E_TOGGLE_ADMIN_TELEPORT] = false;
	g_Toggle[E_TOGGLE_VEHICLE_FRIENDLYFIRE] = false;

	for (new i; i < MAX_VEHICLES; i++)
		v_VehicleHealth[i] = 0.0;

	#if ! defined FILTERSCRIPT
		#if defined FIX_OnGameModeInit
			return FIX_OnGameModeInit();
		#else
			return 1;
		#endif
	#else
		#if defined FIX_OnFilterScriptInit
			return FIX_OnFilterScriptInit();
		#else
			return 1;
		#endif
	#endif
}
#if ! defined FILTERSCRIPT
	#if defined _ALS_OnGameModeInit
		#undef OnGameModeInit
	#else
		#define _ALS_OnGameModeInit
	#endif
	#define OnGameModeInit FIX_OnGameModeInit
	#if defined FIX_OnGameModeInit
		forward FIX_OnGameModeInit();
	#endif
#else
	#if defined _ALS_OnFilterScriptInit
		#undef OnFilterScriptInit
	#else
		#define _ALS_OnFilterScriptInit
	#endif
	#define OnFilterScriptInit FIX_OnFilterScriptInit
	#if defined FIX_OnFilterScriptInit
		forward FIX_OnFilterScriptInit();
	#endif
#endif

stock FIX_ClearAnimations(playerid, forcesync = 0)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (IsPlayerInAnyVehicle(playerid))
		return ApplyAnimation(playerid, "PED", "CAR_SIT", 4.0, 0, 0, 0, 0, 1, forcesync);

	new ret = ClearAnimations(playerid, forcesync);

	ApplyAnimation(playerid, "PED", "IDLE_STANCE", 4.0, 0, 0, 0, 0, 1, forcesync);
	ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 1, forcesync);
	ApplyAnimation(playerid, "PED", "WALK_PLAYER", 4.0, 0, 0, 0, 0, 1, forcesync);

	return ret;
}
#if defined _ALS_ClearAnimations
    #undef ClearAnimations
#else
    #define _ALS_ClearAnimations
#endif
#define ClearAnimations FIX_ClearAnimations

stock FIX_ApplyAnimation(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0, delay = 250)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	for (new i, j = sizeof(ANIMATIONS); i < j; i ++)
	{
		if (!strcmp(animlib, ANIMATIONS[i], true))
	    {
		    if (p_AnimPrelaodTimer[playerid][i] <= 0)
			{
				KillTimer(p_AnimPrelaodTimer[playerid][i]);
				p_AnimPrelaodTimer[playerid][i] = SetTimerEx("__OnAnimPreload", delay, false, "issfiiiiii", playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
				CallRemoteFunction("__OnAnimProcessed", "iii", playerid, i, p_AnimPrelaodTimer[playerid][i]);
			}
	        return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
	    }
    }

	return 0;
}
#if defined _ALS_ApplyAnimation
  	#undef ApplyAnimation
#else
  	#define _ALS_ApplyAnimation
#endif
#define ApplyAnimation FIX_ApplyAnimation

forward __OnAnimPreload(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync);
public 	__OnAnimPreload(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
{
    ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

forward __OnAnimProcessed(playerid, i, set);
public	__OnAnimProcessed(playerid, i, set)
{
    p_AnimPrelaodTimer[playerid][i] = set;
}

stock FIX_SetPlayerAttachedObject(playerid, index, modelid, bone, Float:fOffsetX = 0.0, Float:fOffsetY = 0.0, Float:fOffsetZ = 0.0, Float:fRotX = 0.0, Float:fRotY = 0.0, Float:fRotZ = 0.0, Float:fScaleX = 1.0, Float:fScaleY = 1.0, Float:fScaleZ = 1.0, materialcolor1 = 0, materialcolor2 = 0)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (SetPlayerAttachedObject(playerid, index, modelid, bone, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, materialcolor1, materialcolor2))
	{
		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_MODEL] = modelid;

		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_BONE] = bone;

		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_X] = fOffsetX;
		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_Y] = fOffsetY;
		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_Z] = fOffsetZ;

		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_RX] = fRotX;
		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_RY] = fRotY;
		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_RZ] = fRotZ;

		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_SX] = fScaleX;
		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_SY] = fScaleY;
		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_SZ] = fScaleZ;

		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_COLOR1] = materialcolor1;
		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_COLOR2] = materialcolor2;

		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_USED] = true;

		return 1;
	}

	return 0;
}
#if defined _ALS_SetPlayerAttachedObject
    #undef SetPlayerAttachedObject
#else
	#define _ALS_SetPlayerAttachedObject
#endif
#define SetPlayerAttachedObject FIX_SetPlayerAttachedObject

stock FIX_RemovePlayerAttachedObject(playerid, index)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (RemovePlayerAttachedObject(playerid, index))
	{
		p_Attachment[playerid][index][E_PLAYER_ATTACHMENT_USED] = false;
		return 1;
	}

	return 0;
}
#if defined _ALS_RemovePlayerAttachedObject
    #undef RemovePlayerAttachedObject
#else
    #define _ALS_RemovePlayerAttachedObject
#endif
#define RemovePlayerAttachedObject FIX_RemovePlayerAttachedObject

stock FIX_SetPlayerCheckpoint(playerid, Float:x, Float:y, Float:z, Float:size)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	DisablePlayerCheckpoint(playerid);

   	if (p_CheckpointTimer[playerid][0])
    	KillTimer(p_CheckpointTimer[playerid][0]);
    p_CheckpointTimer[playerid][0] = SetTimerEx("OnPlayerCheckpointSet", 250, false, "iifffffff", playerid, -1, x, y, z, size, 0.0, 0.0, 0.0);

	return 1;
}
#if defined _ALS_SetPlayerCheckpoint
    #undef SetPlayerCheckpoint
#else
	#define _ALS_SetPlayerCheckpoint
#endif
#define SetPlayerCheckpoint FIX_SetPlayerCheckpoint

stock FIX_SetPlayerRaceCheckpoint(playerid, type, Float:x, Float:y, Float:z, Float:nextx, Float:nexty, Float:nextz, Float:size)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	DisablePlayerRaceCheckpoint(playerid);

    if (p_CheckpointTimer[playerid][1])
    	KillTimer(p_CheckpointTimer[playerid][1]);
    p_CheckpointTimer[playerid][1] = SetTimerEx("OnPlayerCheckpointSet", 250, false, "iifffffff", playerid, type, x, y, z, size, nextx, nexty, nextz);

	return 1;
}
#if defined _ALS_SetPlayerRaceCheckpoint
    #undef SetPlayerRaceCheckpoint
#else
	#define _ALS_SetPlayerRaceCheckpoint
#endif
#define SetPlayerRaceCheckpoint FIX_SetPlayerRaceCheckpoint

forward OnPlayerCheckpointSet(playerid, type, Float:x, Float:y, Float:z, Float:size, Float:nextx, Float:nexty, Float:nextz);
public 	OnPlayerCheckpointSet(playerid, type, Float:x, Float:y, Float:z, Float:size, Float:nextx, Float:nexty, Float:nextz)
{
	if (type == -1)
		SetPlayerCheckpoint(playerid, x, y, z, size);
	else
		SetPlayerRaceCheckpoint(playerid, type, x, y, z, nextx, nexty, nextz, size);

	p_CheckpointTimer[playerid][1] = 0;
}

stock FIX_GetPlayerIp(playerid, ip[], len)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	return strcat((ip[0] = EOS, ip), p_Ip[playerid], len);
}
#if defined _ALS_GetPlayerIp
	#undef GetPlayerIp
#else
	#define _ALS_GetPlayerIp
#endif
#define GetPlayerIp FIX_GetPlayerIp

stock FIX_SetPlayerSkin(playerid, skinid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new seatid = GetPlayerVehicleSeat(playerid);

		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z);

		new ret = SetPlayerSkin(playerid, skinid);

		CallRemoteFunction("__OnPlayerSkinSet", "ii", playerid, skinid);

		PutPlayerInVehicle(playerid, vehicleid, seatid);

		return ret;
	}

	return SetPlayerSkin(playerid, skinid);
}
#if defined _ALS_SetPlayerSkin
	#undef SetPlayerSkin
#else
	#define _ALS_SetPlayerSkin
#endif
#define SetPlayerSkin FIX_SetPlayerSkin

forward __OnPlayerSkinSet(playerid, skinid);
public  __OnPlayerSkinSet(playerid, skinid)
{
	p_Skin[playerid] = skinid;
}

stock FIX_GetPlayerSkin(playerid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	return p_Skin[playerid];
}
#if defined _ALS_GetPlayerSkin
	#undef GetPlayerSkin
#else
	#define _ALS_GetPlayerSkin
#endif
#define GetPlayerSkin FIX_GetPlayerSkin

stock FIX_SetPlayerArmedWeapon(playerid, weaponid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

    new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if (weaponid == 34 && (model == 520 || model == 425))
	{
    	p_CurrentWeapon[playerid] = 0;
		return SetPlayerArmedWeapon(playerid, 0);
	}

    p_CurrentWeapon[playerid] = weaponid;
    return SetPlayerArmedWeapon(playerid, weaponid);
}
#if defined _ALS_SetPlayerArmedWeapon
   #undef SetPlayerArmedWeapon
#else
    #define _ALS_SetPlayerArmedWeapon
#endif
#define SetPlayerArmedWeapon FIX_SetPlayerArmedWeapon

stock FIX_GivePlayerWeapon(playerid, weaponid, ammo)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

    p_CurrentWeapon[playerid] = weaponid;
    return GivePlayerWeapon(playerid, weaponid, ammo);
}
#if defined _ALS_GivePlayerWeapon
   #undef GivePlayerWeapon
#else
    #define _ALS_GivePlayerWeapon
#endif
#define GivePlayerWeapon FIX_GivePlayerWeapon

stock FIX_GetPlayerWeapon(playerid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

    return p_CurrentWeapon[playerid];
}
#if defined _ALS_GetPlayerWeapon
   #undef GetPlayerWeapon
#else
    #define _ALS_GetPlayerWeapon
#endif
#define GetPlayerWeapon FIX_GetPlayerWeapon

stock FIX_SetPlayerWorldBounds(playerid, Float:x_max, Float:x_min, Float:y_max, Float:y_min)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	new ret = SetPlayerWorldBounds(playerid, x_max, x_min, y_max, y_min);
	if (ret)
		CallRemoteFunction("__OnPlayerWorldBoundSet", "iffff", playerid, x_max, x_min, y_max, y_min);

	if (x_max == x_min || y_max == y_min)
		p_WorldBounds[playerid][E_WORLD_BOUND_CHECK] = false;
	else
		p_WorldBounds[playerid][E_WORLD_BOUND_CHECK] = true;

	return ret;
}
#if defined _ALS_SetPlayerWorldBounds
	#undef SetPlayerWorldBounds
#else
	#define _ALS_SetPlayerWorldBounds
#endif
#define SetPlayerWorldBounds FIX_SetPlayerWorldBounds

forward __OnPlayerWorldBoundSet(playerid, Float:x_max, Float:x_min, Float:y_max, Float:y_min);
public 	__OnPlayerWorldBoundSet(playerid, Float:x_max, Float:x_min, Float:y_max, Float:y_min)
{
	new Float:tmp;

	if (x_max < x_min)
	{
		tmp = x_min,
		x_min = x_max,
		x_max = tmp;
	}

	if (y_max < y_min)
	{
		tmp = y_min,
		y_min = y_max,
		y_max = tmp;
	}

   	p_WorldBounds[playerid][E_WORLD_BOUND_CHECK] = false;

	p_WorldBounds[playerid][E_WORLD_BOUND_LX] = x_min;
	p_WorldBounds[playerid][E_WORLD_BOUND_UX] = x_max;

	p_WorldBounds[playerid][E_WORLD_BOUND_LY] = y_min;
	p_WorldBounds[playerid][E_WORLD_BOUND_UY] = y_max;

	GetPlayerPos(playerid, tmp, tmp, tmp),
	p_WorldBounds[playerid][E_WORLD_BOUND_PX] = (x_max - x_min) / 2 + x_min;
	p_WorldBounds[playerid][E_WORLD_BOUND_PY] = (y_max - y_min) / 2 + y_min;
	p_WorldBounds[playerid][E_WORLD_BOUND_PZ] = tmp;
}

stock FIX_TogglePlayerSpectating(playerid, toggle)
{
	new ret = TogglePlayerSpectating(playerid, toggle);
	if (ret)
	{
		p_ToggleSpecTick[playerid] = FIX_GetTickCount();
		KillTimer(p_ToggleSpecTimer[playerid]);

	    p_SpecData[playerid][E_SPEC_DATA_ID] = INVALID_PLAYER_ID;

	    if (toggle)
	    	p_SpecData[playerid][E_SPEC_DATA_TYPE] = SPECTATE_TYPE_ENABLED;
		else
	    	p_SpecData[playerid][E_SPEC_DATA_TYPE] = SPECTATE_TYPE_DISABLED;

	    p_SpecData[playerid][E_SPEC_DATA_MODE] = 0;
	}

	return ret;
}
#if defined _ALS_TogglePlayerSpectating
	#undef TogglePlayerSpectating
#else
	#define _ALS_TogglePlayerSpectating
#endif
#define TogglePlayerSpectating FIX_TogglePlayerSpectating

stock FIX_SetPlayerCameraPos(playerid, Float:x, Float:y, Float:z, delay = 350)
{
	new ret = SetPlayerCameraPos(playerid, x, y, z);
	if (ret)
	{
	    if (p_ToggleSpecTick[playerid] != -1 && (FIX_GetTickCount() - p_ToggleSpecTick[playerid]) <= 600)
	    {
			KillTimer(p_ToggleSpecTimer[playerid]);
			p_ToggleSpecTimer[playerid] = SetTimerEx("__OnPlayerCameraSet", delay, false, "ifffi", playerid, x, y, z, -1);
		}
	}

	return ret;
}
#if defined _ALS_SetPlayerCameraPos
	#undef SetPlayerCameraPos
#else
	#define _ALS_SetPlayerCameraPos
#endif
#define SetPlayerCameraPos FIX_SetPlayerCameraPos

stock FIX_SetPlayerCameraLookAt(playerid, Float:x, Float:y, Float:z, cut = CAMERA_CUT, delay = 350)
{
	new ret = SetPlayerCameraLookAt(playerid, x, y, z, cut);
	if (ret)
	{
	    if (p_ToggleSpecTick[playerid] != -1 && (FIX_GetTickCount() - p_ToggleSpecTick[playerid]) <= 600)
	    {
			KillTimer(p_ToggleSpecTimer[playerid]);
			p_ToggleSpecTimer[playerid] = SetTimerEx("OnPlayerCameraSet", delay, false, "ifffi", playerid, x, y, z, cut);
		}
	}

	return ret;
}
#if defined _ALS_SetPlayerCameraLookAt
	#undef SetPlayerCameraLookAt
#else
	#define _ALS_SetPlayerCameraLookAt
#endif
#define SetPlayerCameraLookAt FIX_SetPlayerCameraLookAt

forward __OnPlayerCameraSet(playerid, Float:x, Float:y, Float:z, cut);
public  __OnPlayerCameraSet(playerid, Float:x, Float:y, Float:z, cut)
{
    if (cut == -1)
		SetPlayerCameraPos(playerid, x, y, z);
    else
		SetPlayerCameraLookAt(playerid, x, y, z, cut);

    p_ToggleSpecTick[playerid] = -1;
    p_ToggleSpecTimer[playerid] = 0;
}

stock FIX_TogglePlayerControllable(playerid, toggle)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (! toggle)
		ClearAnimations(playerid, 1);

	return TogglePlayerControllable(playerid, toggle);
}
#if defined _ALS_TogglePlayerControllable
    #undef TogglePlayerControllable
#else
    #define _ALS_TogglePlayerControllable
#endif
#define TogglePlayerControllable FIX_TogglePlayerControllable

stock FIX_PutPlayerInVehicle(playerid, vehicleid, seatid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (IsPlayerInAnyVehicle(playerid))
	{
		new Float:x, Float:y, Float:z;
		GetVehiclePos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z);
	}

	return PutPlayerInVehicle(playerid, vehicleid, seatid);
}
#if defined _ALS_PutPlayerInVehicle
    #undef PutPlayerInVehicle
#else
    #define _ALS_PutPlayerInVehicle
#endif
#define PutPlayerInVehicle FIX_PutPlayerInVehicle

stock FIX_SpawnPlayer(playerid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (IsPlayerInAnyVehicle(playerid))
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z);
	}

	return SpawnPlayer(playerid);
}
#if defined _ALS_SpawnPlayer
	#undef SpawnPlayer
#else
	#define _ALS_SpawnPlayer
#endif
#define SpawnPlayer FIX_SpawnPlayer

stock FIX_SetPlayerName(playerid, const name[])
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
   		return 0;

    new oldname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, oldname, MAX_PLAYER_NAME);

	if (! strcmp(name, oldname, true))
	{
		if (strcmp(name, oldname, false))
		{
			SetPlayerName(playerid, "_TEMP_NAME_");

			if (SetPlayerName(playerid, name) == -1)
			{
				SetPlayerName(playerid, oldname);
				return -1;
			}
			return 1;
		}
		else
		{
			return 0;
		}
	}

	return SetPlayerName(playerid, name);
}
#if defined _ALS_SetPlayerName
	#undef SetPlayerName
#else
	#define _ALS_SetPlayerName
#endif
#define SetPlayerName FIX_SetPlayerName

stock FIX_SetPlayerSpecialAction(playerid, actionid)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	if (actionid == SPECIAL_ACTION_USEJETPACK)
		ClearAnimations(playerid, 1);

	return SetPlayerSpecialAction(playerid, actionid);
}
#if defined _ALS_SetPlayerSpecialAction
    #undef SetPlayerSpecialAction
#else
    #define _ALS_SetPlayerSpecialAction
#endif
#define SetPlayerSpecialAction FIX_SetPlayerSpecialAction

stock FIX_SetPlayerPos(playerid, Float:x, Float:y, Float:z)
{
    if (playerid < 0 || playerid >= MAX_PLAYERS)
    	return 0;

	new w[14], a[14];
	for (new i; i < 14; i++)
	    GetPlayerWeaponData(playerid, i, w[i], a[i]);
	ResetPlayerWeapons(playerid);

	new ret = SetPlayerPos(playerid, x, y, z);
	if (ret)
	{
	    for (new i; i < 14; i++)
	    	GivePlayerWeapon(playerid, w[i], a[i]);
	}

	return ret;
}
#if defined _ALS_SetPlayerPos
	#undef SetPlayerPos
#else
	#define _ALS_SetPlayerPos
#endif
#define SetPlayerPos FIX_SetPlayerPos

stock FIX_CreateVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay, addsiren = 0)
{
	new ret = CreateVehicle(vehicletype, x, y, z, rotation, color1, color2, respawn_delay, addsiren);
	if (ret != INVALID_VEHICLE_ID)
		v_VehicleHealth[ret] = 1000.0;
	return ret;
}
#if defined _ALS_CreateVehicle
	#undef CreateVehicle
#else
	#define _ALS_CreateVehicle
#endif
#define CreateVehicle FIX_CreateVehicle

stock FIX_AddStaticVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2)
{
	new ret = AddStaticVehicle(vehicletype, x, y, z, rotation, color1, color2);
	if (ret != INVALID_VEHICLE_ID)
    	v_VehicleHealth[ret] = 1000.0;
	return ret;
}
#if defined _ALS_AddStaticVehicle
	#undef AddStaticVehicle
#else
	#define _ALS_AddStaticVehicle
#endif
#define AddStaticVehicle FIX_AddStaticVehicle

stock FIX_AddStaticVehicleEx(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay, addsiren = 0)
{
	new ret = AddStaticVehicleEx(vehicletype, x, y, z, rotation, color1, color2, respawn_delay, addsiren);
	if (ret != INVALID_VEHICLE_ID)
    	v_VehicleHealth[ret] = 1000.0;
	return ret;
}
#if defined _ALS_AddStaticVehicleEx
	#undef AddStaticVehicleEx
#else
	#define _ALS_AddStaticVehicleEx
#endif
#define AddStaticVehicleEx FIX_AddStaticVehicleEx

stock FIX_SetVehicleHealth(vehicleid, Float:health)
{
	new ret = SetVehicleHealth(vehicleid, health);
	if (ret)
    	v_VehicleHealth[vehicleid] = health;
	return ret;
}
#if defined _ALS_SetVehicleHealth
	#undef SetVehicleHealth
#else
	#define _ALS_SetVehicleHealth
#endif
#define SetVehicleHealth FIX_SetVehicleHealth

stock FIX_EnableTirePopping(toggle)
{
    g_Toggle[E_TOGGLE_TIRE_POPPING] = bool:toggle;
	return 1;
}
#if defined _ALS_EnableTirePopping
	#undef EnableTirePopping
#else
	#define _ALS_EnableTirePopping
#endif
#define EnableTirePopping FIX_EnableTirePopping

stock FIX_AllowInteriorWeapons(toggle)
{
    g_Toggle[E_TOGGLE_INTERIOR_WEAPONS] = bool:toggle;
    return 1;
}
#if defined _ALS_AllowInteriorWeapons
	#undef AllowInteriorWeapons
#else
	#define _ALS_AllowInteriorWeapons
#endif
#define AllowInteriorWeapons FIX_AllowInteriorWeapons

stock FIX_AllowAdminTeleport(toggle)
{
    g_Toggle[E_TOGGLE_ADMIN_TELEPORT] = bool:toggle;
    return 1;
}
#if defined _ALS_AllowAdminTeleport
	#undef AllowAdminTeleport
#else
	#define _ALS_AllowAdminTeleport
#endif
#define AllowAdminTeleport FIX_AllowAdminTeleport

stock FIX_EnableVehicleFriendlyFire(toggle = 1)
{
    g_Toggle[E_TOGGLE_VEHICLE_FRIENDLYFIRE] = bool:toggle;
    return 1;
}
#if defined _ALS_EnableVehicleFriendlyFire
	#undef EnableVehicleFriendlyFire
#else
	#define _ALS_EnableVehicleFriendlyFire
#endif
#define EnableVehicleFriendlyFire FIX_EnableVehicleFriendlyFire

stock Text:FIX_TextDrawCreate(Float:x, Float:y, text[])
{
	if (text[0] == '\0' || (text[0] == '\1' && text[1] == '\0'))
		return TextDrawCreate(x, y, "_");

	return TextDrawCreate(x, y, text);
}
#if defined _ALS_TextDrawCreate
	#undef TextDrawCreate
#else
	#define _ALS_TextDrawCreate
#endif
#define TextDrawCreate FIX_TextDrawCreate

stock PlayerText:FIX_CreatePlayerTextDraw(playerid, Float:x, Float:y, text[])
{
	if (playerid < 0 || playerid >= MAX_PLAYERS)
		return PlayerText:INVALID_TEXT_DRAW;

	if (text[0] == '\0' || (text[0] == '\1' && text[1] == '\0'))
		return CreatePlayerTextDraw(playerid, x, y, "_");

	return CreatePlayerTextDraw(playerid, x, y, text);
}
#if defined _ALS_CreatePlayerTextDraw
	#undef CreatePlayerTextDraw
#else
	#define _ALS_CreatePlayerTextDraw
#endif
#define CreatePlayerTextDraw FIX_CreatePlayerTextDraw

stock FIX_TextDrawSetString(Text:text, string[])
{
	if (string[0] == '\0' || (string[0] == '\1' && string[1] == '\0'))
		return TextDrawSetString(text, "_");

	return TextDrawSetString(text, string);
}
#if defined _ALS_TextDrawSetString
	#undef TextDrawSetString
#else
	#define _ALS_TextDrawSetString
#endif
#define TextDrawSetString FIX_TextDrawSetString

stock FIX_PlayerTextDrawSetString(playerid, PlayerText:text, string[])
{
	if (playerid < 0 || playerid >= MAX_PLAYERS)
		return -1;

	if (string[0] == '\0' || (string[0] == '\1' && string[1] == '\0'))
		return PlayerTextDrawSetString(playerid, text, "_");

	return PlayerTextDrawSetString(playerid, text, string);
}
#if defined _ALS_PlayerTextDrawSetString
	#undef PlayerTextDrawSetString
#else
	#define _ALS_PlayerTextDrawSetString
#endif
#define PlayerTextDrawSetString FIX_PlayerTextDrawSetString

stock FIX_GameTextForPlayer(playerid, string[], time, style)
{
	if (string[0] == '\0' || (string[0] == '\1' && string[1] == '\0'))
		return GameTextForPlayer(playerid, "_", time, style);

	return GameTextForPlayer(playerid, string, time, style);
}
#if defined _ALS_GameTextForPlayer
	#undef GameTextForPlayer
#else
	#define _ALS_GameTextForPlayer
#endif
#define GameTextForPlayer FIX_GameTextForPlayer

stock FIX_GameTextForAll(string[], time, style)
{
	if (string[0] == '\0' || (string[0] == '\1' && string[1] == '\0'))
		return GameTextForAll("_", time, style);

	return GameTextForAll(string, time, style);
}
#if defined _ALS_GameTextForAll
	#undef GameTextForAll
#else
	#define _ALS_GameTextForAll
#endif
#define GameTextForAll FIX_GameTextForAll

stock FIX_GetWeaponName(weaponid, weapon[], len)
{
	switch (weaponid)
	{
	    case 0:
		{
	        weapon[0] = EOS;
			strcat(weapon, "Fist", len);
	    }

		case 18:
		{
	        weapon[0] = EOS;
			strcat(weapon, "Molotov Cocktail", len);
        }

		case 44:
		{
	        weapon[0] = EOS;
			strcat(weapon, "Night Vision Goggles", len);
        }

		case 45:
		{
	        weapon[0] = EOS;
			strcat(weapon, "Thermal Goggles", len);
        }

        default: return GetWeaponName(weaponid, weapon, len);
	}

	return 1;
}
#if defined _ALS_GetWeaponName
    #undef GetWeaponName
#else
    #define _ALS_GetWeaponName
#endif
#define GetWeaponName FIX_GetWeaponName

stock FIX_GangZoneCreate(Float:minx, Float:miny, Float:maxx, Float:maxy)
{
	if (minx > maxx)
	{
	    new Float:shift = maxx;
	    maxx = minx;
	    minx = shift;
	}

	if (miny > maxy)
	{
	    new Float:shift = maxy;
	    maxy = miny;
	    miny = shift;
	}

	return GangZoneCreate(floatsub(minx, floatfract(minx)), floatsub(miny, floatfract(miny)), floatsub(maxx, floatfract(maxx)), floatsub(maxy, floatfract(maxy)));
}
#if defined _ALS_GangZoneCreate
	#undef GangZoneCreate
#else
	#define _ALS_GangZoneCreate
#endif
#define GangZoneCreate FIX_GangZoneCreate

stock FIX_random(max)
{
	if (max < 0)
		return -random(-max);

	return random(max);
}
#if defined _ALS_random
	#undef random
#else
	#define _ALS_random
#endif
#define random FIX_random

stock FIX_strins(string[], const substr[], pos, maxlength = sizeof(string))
{
	if (string[0] > 255)
	{
		new strlength = strlen(string);
		new sublength = strlen(substr);
		new m4 = maxlength * 4;

		if (strlength + sublength >= m4)
		{
			if (pos + sublength >= m4)
				return string{pos} = '\0', strcat(string, substr, maxlength);
			else
				string{maxlength - sublength - 1} = '\0';
		}
		return strins(string, substr, pos, maxlength);
	}
	else if (substr[0] > 255)
	{
		new strlength = strlen(string);
		new sublength = strlen(substr);

		if (strlength + sublength >= maxlength)
		{
			if (pos + sublength >= maxlength)
				return string[pos] = '\0', strcat(string, substr, maxlength);
			else
				string[maxlength - sublength - 1] = '\0';
		}

		return strins(string, substr, pos, maxlength);
	}
	else return format(string, maxlength, "%.*s%s%s", pos, string, substr, string[pos]);
}
#if defined _ALS_strins
	#undef strins
#else
	#define _ALS_strins
#endif
#define strins FIX_strins

stock FIX_valstr(dest[], value, bool:pack = false)
{
	static const __cellmin[] = !"-2147483648";

	if (value == cellmin)
		pack && strpack(dest, __cellmin, 12) || strunpack(dest, __cellmin, 12);
	else
		format(dest, 12, "%d", value), pack && strpack(dest, dest, 12);

	return 0;
}
#if defined _ALS_valstr
	#undef valstr
#else
	#define _ALS_valstr
#endif
#define valstr FIX_valstr

stock FIX_strcmp(const string1[], const string2[], bool:ignorecase = false, length = cellmax)
{
	if (string1[0])
	{
		if (string2[0])
			return strcmp(string1, string2, ignorecase, length);
		else
			return 1;
	}
	else
	{
		if (string2[0])
			return -1;
		else
			return 0;
	}
}
#if defined _ALS_strcmp
	#undef strcmp
#else
	#define _ALS_strcmp
#endif
#define strcmp FIX_strcmp

stock FIX_GetTickCount()
{
	new ret = GetTickCount();

	if (ret < 0)
		ret += 2147483647;

	return ret;
}
#if defined _ALS_GetTickCount
	#undef GetTickCount
#else
	#define _ALS_GetTickCount
#endif
#define GetTickCount FIX_GetTickCount

stock FIX_tickcount(&granularity = 0)
{
	new ret = tickcount(granularity);

	if (ret < 0)
		ret += 2147483647;

	return ret;
}
#if defined _ALS_tickcount
	#undef tickcount
#else
	#define _ALS_tickcount
#endif
#define tickcount FIX_tickcount

stock FIX_PlayerSpectatePlayer(playerid, targetplayerid, mode = SPECTATE_MODE_NORMAL)
{
	if (targetplayerid == playerid)
	    return 0;

	if (!IsPlayerConnected(playerid))
	    return 0;

	if (!IsPlayerConnected(targetplayerid))
	    return 0;

	p_SpecData[playerid][E_SPEC_DATA_ID] = targetplayerid;
 	p_SpecData[playerid][E_SPEC_DATA_TYPE] = SPECTATE_TYPE_PLAYER;
  	p_SpecData[playerid][E_SPEC_DATA_MODE] = mode;

	SetPlayerInterior(playerid, GetPlayerInterior(targetplayerid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetplayerid));

	if (IsPlayerInAnyVehicle(targetplayerid))
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetplayerid), mode);
	else
	    PlayerSpectatePlayer(playerid, targetplayerid, mode);

	return 1;
}
#if defined _ALS_PlayerSpectatePlayer
    #undef PlayerSpectatePlayer
#else
    #define _ALS_PlayerSpectatePlayer
#endif
#define PlayerSpectatePlayer FIX_PlayerSpectatePlayer

stock FIX_PlayerSpectateVehicle(playerid, targetvehicleid, mode = SPECTATE_MODE_NORMAL)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	if (!IsValidVehicle(targetvehicleid))
	    return 0;

	p_SpecData[playerid][E_SPEC_DATA_ID] = targetvehicleid;
 	p_SpecData[playerid][E_SPEC_DATA_TYPE] = SPECTATE_TYPE_VEHICLE;
 	p_SpecData[playerid][E_SPEC_DATA_MODE] = mode;

	SetPlayerInterior(playerid, v_Interior[targetvehicleid]);
	SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(targetvehicleid));

	return PlayerSpectateVehicle(playerid, targetvehicleid, mode);
}
#if defined _ALS_PlayerSpectateVehicle
    #undef PlayerSpectateVehicle
#else
    #define _ALS_PlayerSpectateVehicle
#endif
#define PlayerSpectateVehicle FIX_PlayerSpectateVehicle

stock FIXER_UpdatePlayerSpectateID(playerid, bool:advance = true)
{
	switch (p_SpecData[playerid][E_SPEC_DATA_TYPE])
	{
	    case SPECTATE_TYPE_PLAYER:
	    {
	        new count;
			new targetid = INVALID_PLAYER_ID;

			if (advance)
			{
   			SPEC_NEXT_PLAYER:
                for (new i = (p_SpecData[playerid][E_SPEC_DATA_ID] + 1), j = GetPlayerPoolSize(); IsPlayerConnected(i); i++)
                {
                    count++;

                    if (i > j)
                    {
						if (count < 2)
						    break;

                     	goto SPEC_PERVIOUS_PLAYER;
					}

                    if (GetPlayerState(i) == PLAYER_STATE_SPECTATING || GetPlayerState(i) == PLAYER_STATE_WASTED)
                        continue;

                    targetid = i;
					break;
                }
			}
			else
			{
			SPEC_PERVIOUS_PLAYER:
                for (new i = (p_SpecData[playerid][E_SPEC_DATA_ID] - 1); IsPlayerConnected(i); i--)
                {
                    count++;

                    if (i < 0)
                    {
						if (count < 2)
						    break;

                     	goto SPEC_NEXT_PLAYER;
					}

                    if (GetPlayerState(i) == PLAYER_STATE_SPECTATING || GetPlayerState(i) == PLAYER_STATE_WASTED)
                        continue;

                    targetid = i;
					break;
                }
			}

			if (targetid == INVALID_PLAYER_ID)
   				return INVALID_PLAYER_ID;

            p_SpecData[playerid][E_SPEC_DATA_ID] = targetid;

			SetPlayerInterior(playerid, GetPlayerInterior(targetid));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

			if (IsPlayerInAnyVehicle(targetid))
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid), p_SpecData[playerid][E_SPEC_DATA_MODE]);
			else
			    PlayerSpectatePlayer(playerid, targetid, p_SpecData[playerid][E_SPEC_DATA_MODE]);

   			return targetid;
		}

		case SPECTATE_TYPE_VEHICLE:
	    {
	        new count;
			new targetid = INVALID_VEHICLE_ID;

			if (advance)
			{
   			SPEC_NEXT_VEHICLE:
                for (new i = (p_SpecData[playerid][E_SPEC_DATA_ID] + 1), j = GetVehiclePoolSize(); ; i++)
                {
                	if (!IsValidVehicle(i))
                		continue;

                    count++;

                    if (i > j)
                    {
                        if (count < 2)
                            break;

                     	goto SPEC_PERVIOUS_VEHICLE;
					}

                   	targetid = i;
					break;
                }
			}
			else
			{
			SPEC_PERVIOUS_VEHICLE:
                for (new i = (p_SpecData[playerid][E_SPEC_DATA_ID] - 1); ; i--)
                {
                	if (!IsValidVehicle(i))
                		continue;

                    count++;

                    if (i < 1)
                    {
                        if (count < 2)
                            break;

                     	goto SPEC_NEXT_VEHICLE;
					}

                   	targetid = i;
					break;
                }
			}

			if (targetid == INVALID_VEHICLE_ID)
	   			return INVALID_VEHICLE_ID;

			p_SpecData[playerid][E_SPEC_DATA_ID] = targetid;

			SetPlayerInterior(playerid, v_Interior[targetid]);
			SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(targetid));

			PlayerSpectateVehicle(playerid, targetid, p_SpecData[playerid][E_SPEC_DATA_MODE]);
			return targetid;
		}
	}

	return -1;
}

stock FIX_LinkVehicleToInterior(vehicleid, interiorid)
{
	CallRemoteFunction("__OnVehicleInteriorSet", "ii", vehicleid, interiorid);
	return LinkVehicleToInterior(vehicleid, interiorid);
}
#if defined _ALS_LinkVehicleToInterior
	#undef LinkVehicleToInterior
#else
	#define _ALS_LinkVehicleToInterior
#endif
#define LinkVehicleToInterior FIX_LinkVehicleToInterior

forward __OnVehicleInteriorSet(vehicleid, interiorid);
public  __OnVehicleInteriorSet(vehicleid, interiorid)
{
 	v_Interior[vehicleid] = interiorid;
}

stock FIX_GetPlayerWeaponData(playerid, slot, &weapons, &ammo)
{
	new ret = GetPlayerWeaponData(playerid, slot, weapons, ammo);
	if (ret)
	{
		if (ammo <= 0)
		    weapons = 0;
	}
	return ret;
}
#if defined _ALS_GetPlayerWeaponData
	#undef GetPlayerWeaponData
#else
	#define _ALS_GetPlayerWeaponData
#endif
#define GetPlayerWeaponData FIX_GetPlayerWeaponData

stock FIXER_AllowUpdate(bool:allow = true)
{
	FIX_UPDATER = allow;
}
